#pragma once
#include <unordered_map>

#include "GLcommon.h"
struct BufferObjectSubmiter
{
	static BufferObjectSubmiter & GetInstance()
	{
		static BufferObjectSubmiter instance;
		return instance;
	}
	/// <summary> Generate a buffer object </summary>
	GLuint Generate(size_t size = 0u);
	/// <summary> Set data incrementally. buffer must be generated by Generate() </summary>
	void SetData(GLuint bufferID, const void * data, size_t size, GLenum hint = GL_STREAM_DRAW);
	/// <summary> Reserve storage for a buffer object. If capacity is increased, then all of the data is lost. </summary>
	void Reserve(GLuint bufferID, size_t size, GLenum hint = GL_STREAM_DRAW);
private:
	BufferObjectSubmiter() = default;

	std::unordered_map <unsigned int, unsigned int> buffersize;
};